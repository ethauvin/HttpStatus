plugins {
    id 'java'
    id 'jacoco'
    id 'idea'
    id 'application'
    id 'maven-publish'
    id 'signing'
    id 'pmd'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'net.thauvin.erik.gradle.semver' version '1.0.4'
    id 'com.github.spotbugs' version '5.0.10'
    id 'org.sonarqube' version '3.4.0.2513'
}

import com.github.spotbugs.snom.SpotBugsTask
import org.apache.tools.ant.taskdefs.condition.Os

defaultTasks 'deploy'

final def deployDir = 'deploy'

final def mavenName = 'HttpStatus'
final def mavenDescription = 'HttpStatus JSP Tag Library'
final def mavenUrl = 'https://github.com/ethauvin/HttpStatus'
final def mavenLicense = 'The BSD 3-Clause License'
final def mavenLicenseUrl = 'http://opensource.org/licenses/BSD-3-Clause'
final def mavenScmCon = 'https://github.com/ethauvin/HttpStatus.git'
final def mavenScmDevCon = 'git@github.com:ethauvin/HttpStatus.git'

group = 'net.thauvin.erik.httpstatus'

mainClassName = 'net.thauvin.erik.httpstatus.Reasons'

ext {
    versions = [
            pmd     : '6.47.0',
            spotbugs: '4.7.1'
    ]
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
//    compileOnly 'javax.servlet:javax.servlet-api:4.0.1'
//    compileOnly 'javax.servlet.jsp:jsp-api:2.2.1-b03'
//    compileOnly 'javax.el:javax.el-api:3.0.1-b06'

    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    compileOnly 'jakarta.servlet.jsp:jakarta.servlet.jsp-api:3.1.0'
    compileOnly 'jakarta.el:jakarta.el-api:5.0.1'

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'
    spotbugsPlugins 'com.mebigfatguy.sb-contrib:sb-contrib:7.4.7'

    compileOnly "com.github.spotbugs:spotbugs-annotations:$versions.spotbugs"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:$versions.spotbugs"

    testImplementation 'org.testng:testng:7.6.1'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    doFirst {
        title = mavenDescription + ' ' + project.version
    }
    options.source = 8
    options.tags = ['created']
    options.author = true
    options.links('https://docs.oracle.com/javase/8/docs/api/')
    options.addStringOption('Xdoclint:none', '-quiet')
}

jar {
    manifest.attributes('Main-Class': mainClassName)
}

clean {
    doLast {
        project.delete(fileTree(deployDir))
    }
}

test {
    testLogging {
        exceptionFormat = 'full'
        events('passed', 'skipped', 'failed')
    }

    useTestNG()
}

spotbugs {
    toolVersion = versions.spotbugs
    excludeFilter = file("$projectDir/config/spotbugs/excludeFilter.xml")

}

pmd {
    toolVersion = versions.pmd
    ignoreFailures = true
    ruleSets = []
    ruleSetFiles = files("${projectDir}/config/pmd.xml")
    consoleOutput = true
}

tasks.withType(SpotBugsTask) {
    reports {
        xml.required = false
        html.required = true
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = project.group
            artifactId = rootProject.name

            pom {
                name = mavenName
                description = mavenDescription
                url = mavenUrl
                licenses {
                    license {
                        name = mavenLicense
                        url = mavenLicenseUrl
                    }
                }
                developers {
                    developer {
                        id = 'ethauvin'
                        name = 'Erik C. Thauvin'
                        email = 'erik@thauvin.net'
                        url = 'https://erik.thauvin.net/'
                    }
                }
                scm {
                    connection = 'scm:git:' + mavenScmCon
                    developerConnection = 'scm:git:' + mavenScmDevCon
                    url = mavenUrl
                }
            }
        }
    }
    repositories {
        maven {
            name = 'ossrh'
            project.afterEvaluate {
                url = project.version.contains('SNAPSHOT')
                        ? 'https://oss.sonatype.org/content/repositories/snapshots/'
                        : 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            }
            credentials(PasswordCredentials)
        }
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}

task copyToDeploy(type: Copy) {
    from(configurations.runtimeClasspath) {
        exclude('javax.servlet-api-*.jar',
                'jsp-api-*.jar',
                'jakarta.servlet-*.jar',
                'jakarta-servlet.*.jar',
                'jakarta.el-api*.jar')
    }
    from jar
    into deployDir
}

task deploy {
    description = "Copies all needed files to the ${deployDir} directory."
    group = 'Publishing'
    dependsOn(clean, build, 'copyToDeploy')
    outputs.dir deployDir
    inputs.files copyToDeploy
    mustRunAfter clean
}

task release {
    group = 'Publishing'
    description = 'Releases new version.'
    dependsOn(wrapper, 'deploy', 'pandoc', publishToMavenLocal)
}

task pandoc(type: Exec) {
    group = 'Documentation'
    final def pandoc_args = ['--from', 'gfm',
                             '--to', 'html5',
                             '--metadata', "pagetitle=$mavenDescription",
                             '-s',
                             '-c', 'github-pandoc.css',
                             '-o', 'docs/README.html',
                             'README.md']
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine(['cmd', '/c', 'pandoc'] + pandoc_args)
    } else {
        executable = 'pandoc'
        args(pandoc_args)
    }
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}

jacoco {
    toolVersion = '0.8.9-SNAPSHOT'
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

sonarqube {
    properties {
        property('sonar.organization', 'ethauvin-github')
        property('sonar.projectKey', 'ethauvin_HttpStatus')
        property('sonar.host.url', 'https://sonarcloud.io')
        property('sonar.sourceEncoding', 'UTF-8')
    }
}

tasks.sonarqube {
    dependsOn 'jacocoTestReport'
}
